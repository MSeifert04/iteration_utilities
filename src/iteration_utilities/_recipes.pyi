from typing import (
    Any,
    Callable,
    Iterable,
    Optional,
    Tuple,
)

def tail(iterable: Iterable, n: int) -> Iterable: ...
def consume(iterator: Iterable, n: Optional[int]) -> None: ...
def ncycles(iterable: Iterable, n: int) -> Iterable: ...
def flatten(iterable: Iterable[Iterable]) -> Iterable: ...
def repeatfunc(func: Callable, *args, times: int = None) -> Iterable: ...
def ipartition(iterable: Iterable, pred: Optional[Callable]) -> Tuple[Iterable, Iterable]: ...
def nth_combination(iterable: Iterable, r: int, index: int) -> Tuple: ...
def powerset(iterable: Iterable) -> Iterable[Tuple]: ...
def random_product(*iterables: Iterable, repeat: int = 1) -> Tuple: ...
def random_permutation(iterable: Iterable, r: int = None) -> Tuple: ...
def random_combination(iterable: Iterable, r: int, replacement: bool = False) -> Tuple: ...
def tee_lookahead(tee: Iterable, i: int) -> Any: ...
